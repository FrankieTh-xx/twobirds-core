{
    "project": {
        "name": "twoBirds",
        "description": "twoBirds WebComponent Framework",
        "version": "v7.1.5",
        "url": "http://www.tb-core.org"
    },
    "files": {
        "src/tb/tb.js": {
            "name": "src/tb/tb.js",
            "modules": {},
            "classes": {
                "tb.Selector": 1,
                "tb": 1,
                "tb.Event": 1,
                "tb.dom": 1,
                "tb.Util": 1,
                "tb.Model": 1,
                "tb.Require": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "tb.Selector": {
            "name": "tb.Selector",
            "shortname": "tb.Selector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 42,
            "is_constructor": 1,
            "extends": "tb",
            "params": [
                {
                    "name": "pSelector",
                    "description": "",
                    "type": "Function|string|object|array"
                }
            ],
            "return": {
                "description": "- the twoBirds instance you just created\n\ntwoBirds selector constructor\n\nCAUTION: you may use this class directly if you know what you are doing,\nbut the correct syntax for call is simply:",
                "type": "Object"
            },
            "example": [
                "\n\n    tb( pSelector )\n       .whateverChainedMethod(); // etc.\n\nHINT: tb() works as a selector, new tb() instanciates a twoBirds instance from a class.",
                "\n\n    // get tB instances from DOM by css query selector\n    tb( 'div' )            // any tbInstance that sits in a div dom node\n\n    // get tB instances from DOM by constructor\n    tb( app.sampleConstructor )     // any tbInstance in DOM that is instanceof sampleConstructor\n\n    // get tB instances from DOM by regEx\n    tb( /myRegEx/ )    // any tbInstance in DOM that has a namespace property that fits the regEx\n\n    // get tB instances from DOM by array of selectors\n    tb( [ 'body', /myRegEx/ ] )     // any combination of selectors in an array, result is additive, flat and unique\n"
            ]
        },
        "tb": {
            "name": "tb",
            "shortname": "tb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 201,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pOptions",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pClass",
                            "description": "- class Namespace as string or class"
                        },
                        {
                            "name": "pConfig",
                            "description": "- optional configuration, any type, preferrably object",
                            "optional": true
                        },
                        {
                            "name": "pTarget",
                            "description": "- target to put object in, DOM node or any other object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "- the twoBirds instance you just created\n\ntwoBirds constructor",
                "type": "Object"
            },
            "example": [
                "\n\n    // put Instance into DOM node\n    new tb(\n        app.myConstructor,                                     // any constructor you want to have an instance of\n        { ... },                                               // the config object you hand over to the constructor\n        target.appendChild( document.createElement( 'span' ) ) // DOM node to insert the object item\n    );\n\n    // put Instance anywhere\n    new tb(\n        app.myConstructor,            // any constructor you want to have an instance of\n        { ... },                      // the config object you hand over to the constructor\n        anotherTbInstance             // any other object you want to put the tb instance in\n    );\n\n    // if a namespace STRING is given, requirement loading is done in case the class isnt present yet\n    new tb(\n        'app.myConstructor',          // namespace string for the constructor you want to have an instance of\n        { ... },                      // the config object you hand over to the constructor\n        anotherTbInstance             // any other object you want to put the tb instance in\n    );\n"
            ]
        },
        "tb.Event": {
            "name": "tb.Event",
            "shortname": "tb.Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 1407,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of event",
                    "type": "String"
                },
                {
                    "name": "pEventData",
                    "description": "- data to be appended to this event",
                    "optional": true
                },
                {
                    "name": "pBubble",
                    "description": "- bubbling indicator, 'l' = local, 'u' = up, 'd' = down or any combination",
                    "type": "String",
                    "optional": true,
                    "optdefault": "l"
                }
            ],
            "return": {
                "description": "tb.Event instance",
                "type": "Object"
            }
        },
        "tb.dom": {
            "name": "tb.dom",
            "shortname": "tb.dom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 1531,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "a .querySelectorAll() selector string, a dom node or an array of dom nodes",
                    "optional": true
                },
                {
                    "name": "pDomNode",
                    "description": "- DOM node to start search in",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ntb.dom() function\n\njquery like selector engine",
                "type": "Object"
            }
        },
        "tb.Util": {
            "name": "tb.Util",
            "shortname": "tb.Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 2824,
            "is_constructor": 1,
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Void"
                }
            ],
            "return": {
                "description": "THIS IS A PLACEHOLDER CLASS!\n\n- all methods and properties documented here are curry properties of the tb constructor.\n- Refer to specific documentation for usage.",
                "type": "Void"
            },
            "example": [
                "\n   // see methods\n"
            ]
        },
        "tb.Model": {
            "name": "tb.Model",
            "shortname": "tb.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 3508,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pConfig",
                    "description": "- config parameter, usually an object @todo param description",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- the model instance\n\ntb.Model constructor\n- create and return a simple CRUD model a \"data\" observable",
                "type": "Object"
            },
            "example": [
                "\n\n    // templates crud model\n    that.templatesModel = new tb.Model({\n               'read': {\n                   url: 'demoapp/configuration/mock/demoapp-configuration-templates.json', // mock data\n                   method: 'GET',\n                   type: 'json',\n                   params: {\n                   },\n                   success: function( pResult ){\n                       that.templatesModel.data( JSON.parse( pResult.text ).data );\n                   },\n                   error: function( pResult ){\n                       console.log( 'an error occured', pResult );\n                   }\n               }\n           });\n\n    // ... and later:\n\n    // when template list data has been read, render\n    that.templatesModel.data.observe( function templateModelDataChanged(){\n               that.trigger( 'render' );\n           });\n\n    // read data\n    that.templatesModel.read();",
                "\n\n    // default config mixin -> result will be in that.config\n    tb.extend(\n    that.config,\n    {   // default settings, reference only\n        'create': {\n            url: '',\n            method: 'POST',\n            success: function( pResult ){\n                that.data( pResult );\n            }\n        },\n        'read': {\n            url: '',\n            method: 'GET',\n            success: function( pResult ){\n                that.data( pResult );\n            }\n        },\n        'update': {\n            url: '',\n            method: 'PUT',\n            success: function( pResult ){\n                that.data( pResult );\n            }\n        },\n        'delete': {\n            url: '',\n            method: 'DELETE',\n            success: function( pResult ){\n                that.data( pResult );\n            }\n        }\n    },\n    pConfig\n    );\n"
            ]
        },
        "tb.Require": {
            "name": "tb.Require",
            "shortname": "tb.Require",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 3779,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pRequiredFiles",
                    "description": "- array containing required files",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "tb.require class\n\n- add into prototype of your constructor\n- instance will get an 'init' event when all files have loaded.",
                "type": "Void"
            },
            "example": [
                "\n\n    tb.namespace( 'app', true ).GrandParent = (function(){\n\n       // Constructor\n       function GrandParent(){\n           var that = this;\n\n           that.handlers = {\n               init,\n               test\n           };\n\n       }\n\n       // Prototype\n       GrandParent.prototype = {\n\n           namespace: 'app.GrandParent',\n\n           'tb.Require': [\n               '/app/GrandParent.css'\n           ]\n\n       };\n\n       return GrandParent;\n\n       // Private Methods\n\n       // ...\n\n   })();\n"
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/tb/tb.js",
            "line": 3,
            "description": "twoBirds V7 core functionality",
            "author": "frank.thuerigen <frank_thuerigen@yahoo.de>",
            "copyright": "copyright (c) 2006- Frank Thürigen",
            "license": "http://www.gnu.org/copyleft/gpl.html GNU GPL v3",
            "class": "tb.Selector"
        },
        {
            "file": "src/tb/tb.js",
            "line": 432,
            "description": "walk all pSelector tb objects, call pMethodName on them\nreturn a UNIQUE TbSelector result set containing all single results",
            "itemtype": "method",
            "name": "walkSelector",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pSelectorObject",
                    "description": "- instanceOf TbSelector",
                    "type": "Object"
                },
                {
                    "name": "pMethodName",
                    "description": "- name of method to call",
                    "type": "String"
                },
                {
                    "name": "pArguments",
                    "description": "- arguments",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "instance of TbSelector",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 492,
            "itemtype": "method",
            "name": "set",
            "chainable": 1,
            "params": [
                {
                    "name": "pKey",
                    "description": "- name of the property",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pValue",
                    "description": "- any kind of value associated with the key",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\nset() method\n\nsets an instance property",
                "type": "Object"
            },
            "example": [
                "\n\n   var a = new tb(...); // create a tB instance\n   a.set( 'x': 42 );\n"
            ],
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 535,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "pKey",
                    "description": "- name of the property",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "any value stored in property, or undefined\n\nget() method\n\nget an instance property"
            },
            "example": [
                "\n\n    var a = new tb(...); // create a tB instance\n    a.get( 'x' );\n"
            ],
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 569,
            "itemtype": "method",
            "name": "trigger",
            "chainable": 1,
            "params": [
                {
                    "name": "pEvent",
                    "description": "- name of event OR tb.Event instance (in this case the only parameter)",
                    "type": "String"
                },
                {
                    "name": "pEventData",
                    "description": "- event data, usally an object",
                    "optional": true
                },
                {
                    "name": "pBubble",
                    "description": "- bubbling indicator : 'l' = local, 'u' = up, 'd' = down - or any combination",
                    "type": "String",
                    "optional": true,
                    "optdefault": "l"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\ntrigger method\n\ntriggers an asynchronous twoBirds event, optionally with data and bubble indicator",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 722,
            "itemtype": "method",
            "name": "on",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the handler function",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- the function to be added to the handler array",
                    "type": "Function"
                },
                {
                    "name": "pOnce",
                    "description": "- true = remove handler after first call, false = keep handler",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\n.on() method\n\nadds a handler to a twoBirds instance or a tb.Selector result set",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 771,
            "itemtype": "method",
            "name": "one",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the handler function",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- the function to be added to the handler array",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\n.one() method\n\nadds a handler to a twoBirds instance or a tb.Selector result set,\nto be called only once when the event fires\nafterwards the handler is deleted from the event handler list",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 796,
            "itemtype": "method",
            "name": "off",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the handler function",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- the function to be added to the handler array",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\n.off() method\n\nremoves a handler from a twoBirds instance or a tb.Selector result set\nafterwards the handler is deleted from the event handler list",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 847,
            "itemtype": "method",
            "name": "parents",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.parents() method\n\nfor each this[0...n] or this as tb() instance,\n- get all parent tb objects\n- check them against the filter param pSelector\n- return them as a TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 909,
            "itemtype": "method",
            "name": "parent",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.parent() method\n\nfor each this[0...n] or this as tb() instance,\n- get closest parent tb object\n- check all of them against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 960,
            "itemtype": "method",
            "name": "descendants",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.descendants() method\n\nfor each this[0...n] or this as tb() instance,\n- get all descendants of tb object\n- check them against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1018,
            "itemtype": "method",
            "name": "children",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                },
                {
                    "name": "pLocalOnly",
                    "description": "- only local children of given tb instance(s)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.children() method\n\nfor each this[0...n] or this as tb() instance,\n- get all direct children of tb object\n- check them against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1073,
            "itemtype": "method",
            "name": "next",
            "chainable": 1,
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nnext() method\n\nfor each this[0...n] or this as tb() instance,\n- get the direct following sibling of tb instance\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1111,
            "itemtype": "method",
            "name": "prev",
            "chainable": 1,
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nprev() method\n\nfor each this[0...n] or this as tb() instance,\n- get the direct previous sibling of tb instance\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1149,
            "itemtype": "method",
            "name": "first",
            "chainable": 1,
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nfirst() method\n\nfor each this[0...n] or this as tb() instance,\n- get the first child of the tb object parent\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1183,
            "itemtype": "method",
            "name": "last",
            "chainable": 1,
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nlast() method\n\nfor each this[0...n] or this as tb() instance,\n- get the last child of the tb object parent\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1210,
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "- TbSelector elements in a plain array\n\ntoArray() method",
                "type": "Array"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1224,
            "itemtype": "method",
            "name": "filter",
            "chainable": 1,
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nfilter() method\n\nfor each this[0...n] or this as tb() instance,\n- check them against the filter param pParam\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1266,
            "itemtype": "method",
            "name": "not",
            "chainable": 1,
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nnot() method\n\nfor each this[0...n] or this as tb() instance,\n- check them against pSelector and remove all that match\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1309,
            "itemtype": "method",
            "name": "is",
            "chainable": 1,
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nis() method\n\nfor each this[0...n] or this as tb() instance,\n- check them against tbSelector( pParam ) and remove all that DO NOT match\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1351,
            "itemtype": "method",
            "name": "add",
            "chainable": 1,
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nadd() method\n\nadd elements to current result set\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1427,
            "itemtype": "method",
            "name": "stopPropagation",
            "return": {
                "description": "tb.Event object\n\nstop propagation after all handlers on this object have run",
                "type": "Object"
            },
            "class": "tb.Event"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1439,
            "itemtype": "method",
            "name": "stopImmediatePropagation",
            "return": {
                "description": "tb.Event object\n\nstop propagation immediately after this handler has run",
                "type": "Object"
            },
            "class": "tb.Event"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1454,
            "description": "document.ready bootstrap",
            "class": "tb.Event"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1625,
            "itemtype": "method",
            "name": "concat",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1635,
            "itemtype": "method",
            "name": "every",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every\">every</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1645,
            "itemtype": "method",
            "name": "forEach",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">forEach</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1655,
            "itemtype": "method",
            "name": "indexOf",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">indexOf</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1664,
            "itemtype": "method",
            "name": "lastIndexOf",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\">lastIndexOf</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1673,
            "itemtype": "method",
            "name": "map",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1682,
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">pop</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1691,
            "itemtype": "method",
            "name": "reduce",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">reduce</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1700,
            "itemtype": "method",
            "name": "reduce",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\">reduceRight</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1709,
            "itemtype": "method",
            "name": "reverse",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">reverse</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1718,
            "itemtype": "method",
            "name": "shift",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\">shift</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1727,
            "itemtype": "method",
            "name": "slice",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">slice</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1736,
            "itemtype": "method",
            "name": "some",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">some</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1745,
            "itemtype": "method",
            "name": "splice",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">splice</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1754,
            "itemtype": "method",
            "name": "some",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\">unshift</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1797,
            "itemtype": "method",
            "name": "appendTo",
            "params": [
                {
                    "name": "pElement",
                    "description": "a .querySelectorAll() selector string, a dom node or an array of dom nodes\n\nappends all elements in tb.dom() result set to given DOM nodes",
                    "optional": true
                }
            ],
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1829,
            "itemtype": "method",
            "name": "append",
            "chainable": 1,
            "params": [
                {
                    "name": "pElement",
                    "description": "an array like set of DOM nodes, or a single DOM node",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nappends given DOM nodes to every node in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1866,
            "itemtype": "method",
            "name": "insertBefore",
            "params": [
                {
                    "name": "pElement",
                    "description": "- a single DOM node\n\nprepends all elements in tb.dom() result set to given DOM node",
                    "optional": true
                }
            ],
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1893,
            "itemtype": "method",
            "name": "insertAfter",
            "params": [
                {
                    "name": "pElement",
                    "description": "- a single DOM node\n\ninserts all elements in tb.dom() result set after given DOM node",
                    "optional": true
                }
            ],
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1930,
            "itemtype": "method",
            "name": "trigger",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the event",
                    "type": "String"
                },
                {
                    "name": "pData",
                    "description": "- optional data",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ncreates a DOM event for each element in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1970,
            "itemtype": "method",
            "name": "on",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName(s)",
                    "description": "- name(s) of the event separated by ' '",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- callback far event",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ncreates a DOM event handler for each element in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2011,
            "itemtype": "method",
            "name": "one",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName(s)",
                    "description": "- name(s) of the event separated by ' '",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- callback far event",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ncreates a DOM event handler for each element in tb.dom() result set (to be called only once)",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2032,
            "itemtype": "method",
            "name": "off",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName(s)",
                    "description": "- name(s) of the event separated by ' '",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- callback far event",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremoves one or all DOM event handlers from each element in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2066,
            "itemtype": "method",
            "name": "empty",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremoves one or all DOM event handlers from each element in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2086,
            "itemtype": "method",
            "name": "html",
            "chainable": 1,
            "params": [
                {
                    "name": "pHtml",
                    "description": "- html string or empty string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreplace all nodes .innerHTML with pHtml",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2114,
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nhide all nodes in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2137,
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nshow all nodes in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2157,
            "itemtype": "method",
            "name": "unique",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nforce this tb.dom() result set to be unique ( HINT: if this is necessary, there is an error in twoBirds,\nand we would like to hear about it... )\n\nmethod is called internally though to force result set uniqueness",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2184,
            "itemtype": "method",
            "name": "not",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremove all nodes from this tb.dom() result set, that are in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2212,
            "itemtype": "method",
            "name": "add",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nadd all nodes in tb.dom( pSelector ) result set to tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2243,
            "itemtype": "method",
            "name": "parents",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreturn all parent nodes of tb.dom() result set, that match nodes in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2282,
            "itemtype": "method",
            "name": "parent",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreturn closest parent nodes of tb.dom() result set, that match nodes in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2312,
            "itemtype": "method",
            "name": "children",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreturn child nodes of tb.dom() result set, that match nodes in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2347,
            "itemtype": "method",
            "name": "descendants",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreturn all descendant nodes of tb.dom() result set, that match nodes in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2382,
            "itemtype": "method",
            "name": "addClass",
            "chainable": 1,
            "params": [
                {
                    "name": "pClassName",
                    "description": "- class name(s) to add, separated by ' '",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nadd class name to each of tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2412,
            "itemtype": "method",
            "name": "removeClass",
            "chainable": 1,
            "params": [
                {
                    "name": "pClassName",
                    "description": "- class name(s) to remove, separated by ' '",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremove class name from each of tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2459,
            "itemtype": "method",
            "name": "attr",
            "chainable": 1,
            "params": [
                {
                    "name": "pKey",
                    "description": "- if string: DOM node attribute name; if object: hash of attributeName: attributeValue"
                },
                {
                    "name": "pValue",
                    "description": "- value to set in DOM node(s)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nset of get attribute values to each DOM node in give tb.dom() result set\n\nHINT:\nif pKey is a string and pValue is not given its a GET\nif pKey is an object or pKey(string) and pValue(string) are given, it is a SET. ONLY THEN this is CHAINABLE.",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2520,
            "itemtype": "method",
            "name": "removeAttr",
            "chainable": 1,
            "params": [
                {
                    "name": "pKeys",
                    "description": "- attribute name(s) separated by ' '",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremove attribute(s) completely from tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2551,
            "itemtype": "method",
            "name": "toArray",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set converted to a plain array of DOM nodes\n\nconvert tb.dom() result set converted to a plain array of DOM nodes",
                "type": "Array"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2577,
            "itemtype": "method",
            "name": "filter",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- tb.dom() selector to match against or [].filter.call( this, function() )",
                    "type": "..."
                }
            ],
            "return": {
                "description": "- tb.dom() result set\n\nmatch tb.dom() result set against pSelector filter",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2614,
            "itemtype": "method",
            "name": "push",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- tb.dom() selector or DOM node"
                }
            ],
            "return": {
                "description": "- tb.dom() result set\n\nadd given pSelector result set to tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2650,
            "itemtype": "method",
            "name": "val",
            "chainable": 1,
            "params": [
                {
                    "name": "pValue",
                    "description": "- value to set to DOM input type element",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[pValue] - value from input element [0] in tb.dom() result set\n\nif pValue given, it is a SET and the method is chainable\nif no pValue given, it is a GET and the method will return the value"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2842,
            "itemtype": "method",
            "name": "tb.observable",
            "params": [
                {
                    "name": "pStartValue",
                    "description": "- initial content of observable"
                }
            ],
            "return": {
                "description": "- observableFunction\n\nfunction tb.observable()\n\n- creates a function\n- initializes a value to observe\n- returns this function",
                "type": "Function"
            },
            "example": [
                "\n\n    o = tb.observable( {} );\n\n    o(\n       { newData: 'newData' }\n    ); // change observable value\n\n    o.observe( function(){ ... }, true ); // will be triggered when observable value changes, true indicates only once\n"
            ],
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2912,
            "itemtype": "method",
            "name": "tb.namespace",
            "params": [
                {
                    "name": "pNamespace",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "pForceCreation",
                    "description": "- true => force creation of namespace object if it didnt exist before",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "pObject",
                    "description": "- object to scan",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "namespaceObject\n\ntb.namespace() function",
                "type": "Object"
            },
            "example": [
                "\n\n    // lookup [window] namespace:\n    tb.namespace( 'app.Dashboard' ); // gets the constructor for dashboard\n\n    // in a constructor force namespace creation:\n    tb.namespace( 'app', true )     // force creation of 'app' if it is not there yet\n    .Dashboard = function(){ ... }\n\n    // lookup namespace in any object and return value:\n    tb.namespace( 'x.y', null, { x: { y: 42 } } );     // 42\n"
            ],
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2972,
            "itemtype": "method",
            "name": "tb.bind",
            "params": [
                {
                    "name": "pSelector",
                    "description": "- DOM node to start binding in",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "tb.bind() function",
                "type": "Void"
            },
            "example": [
                "\n\n    tb.bind( document.body );\n    // scans the given element and all of its descendants\n    // in the DOM and looks for attributes \"data-tb\" in the nodes.\n    // resulting list will be scanned for those nodes that do not already\n    // have an tb object inside.\n    // creates a new tb object based on the class namespace given\n    // in the \"data-tb\" attribute\n    // stores it in the DOM element\n   \n    tb.bind( document.body, 'n1.n2.<className>' [ , <config data> ] )\n    //creates a new tb object based on the 2nd parameter, giving 3rd as constructor parameter\n    //stores it in the DOM element\n    //THIS VARIANT WILL overwrite ANY MATCHING INSTANCE THAT ALREADY RESIDES IN THE DOM NODE(S)!\n"
            ],
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3081,
            "itemtype": "method",
            "name": "tb.getId",
            "return": {
                "description": "- unique id\n\nreturns a unique id",
                "type": "String"
            },
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3094,
            "itemtype": "method",
            "name": "tb.extend",
            "params": [
                {
                    "name": "pObj",
                    "description": "- object to extend",
                    "type": "Object"
                },
                {
                    "name": "pObj",
                    "description": "- other object",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "- other object\n\ntb.extend() function\n\ntakes any number of objects as parameters\nmerges content into the first parameter object\nalways a deep copy",
                "type": "Object"
            },
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3135,
            "itemtype": "method",
            "name": "tb.parse",
            "params": [
                {
                    "name": "pWhat",
                    "description": "- text, object or array to parse"
                },
                {
                    "name": "pParse",
                    "description": "- hash object containing replacement key/value pairs",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "result, = pWhat parsed\n\ntb.parse() function\n\nwill replace all matching  occurrences with values from pParse object\nif typeof pWhat is object or array, it will be done with all strings contained therein and the original pWhat returned",
                "type": "namespace1.namespace2.etc"
            },
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3191,
            "itemtype": "method",
            "name": "tb.request",
            "params": [
                {
                    "name": "pOptions",
                    "description": "a hash object containing these options:<br><br><br>",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url:",
                            "description": "(string, omitted) the URL to call"
                        },
                        {
                            "name": "params",
                            "description": "- a hash object containing the parameters to post",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "- (string, optional, defaults to 'POST') the XHR method",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "- a hash object containing additional XHR headers",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "success",
                            "description": "- the function to call with the request result",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "- the function to call if request status not in 200...299",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "statechange",
                            "description": "- the function to call when readyState changes",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "- structure sample: { cb: myFunction, ms:10000 }\n   cb: callback to run when timeout occurs\n   ms: number of milliseconds the request will run before being terminated",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "cachable",
                            "description": "- defaults to true, indicates whether or not to include a unique id in URL",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "async",
                            "description": "- whether or not to make an asynchronous request",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a twoBirds request object"
            },
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3213,
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3257,
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3274,
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3296,
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3321,
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3335,
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3363,
            "name": "",
            "itemtype": "method",
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3488,
            "itemtype": "method",
            "name": "tb.stop",
            "params": [
                {
                    "name": "pStopit",
                    "description": "- indicating whether to stop event handling",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "- true if event handling stopped, else false\n\nstops event handling",
                "type": "Boolean"
            },
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3653,
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "pParameters",
                    "description": "- any combination of parameters\n\n.create() method",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "tb.Model"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3683,
            "itemtype": "method",
            "name": "read",
            "params": [
                {
                    "name": "pParameters",
                    "description": "- any combination of parameters\n\n.read() method",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "tb.Model"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3714,
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "pParameters",
                    "description": "- any combination of parameters\n\n.update() method",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "tb.Model"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3744,
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "pParameters",
                    "description": "- any combination of parameters\n\n.delete() method",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "tb.Model"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3851,
            "description": "requirement handling",
            "class": "tb.Require"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: copyright",
            "line": " src/tb/tb.js:3"
        },
        {
            "message": "unknown tag: license",
            "line": " src/tb/tb.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/tb/tb.js:42"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/tb/tb.js:201"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:432"
        },
        {
            "message": "param name missing: {void}",
            "line": " src/tb/tb.js:2824"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/tb/tb.js:3191"
        },
        {
            "message": "unknown tag: name",
            "line": " src/tb/tb.js:3363"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:3363"
        },
        {
            "message": "Missing item type\ntwoBirds V7 core functionality",
            "line": " src/tb/tb.js:3"
        },
        {
            "message": "Missing item type\ndocument.ready bootstrap",
            "line": " src/tb/tb.js:1454"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:3213"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:3257"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:3274"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:3296"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:3321"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:3335"
        },
        {
            "message": "Missing item type\nrequirement handling",
            "line": " src/tb/tb.js:3851"
        }
    ]
}