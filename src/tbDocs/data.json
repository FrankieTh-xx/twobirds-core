{
    "project": {
        "name": "twoBirds",
        "description": "twoBirds WebComponent Framework",
        "version": "v7.0.46",
        "url": "http://www.tb-core.org"
    },
    "files": {
        "src/tb/tb.js": {
            "name": "src/tb/tb.js",
            "modules": {},
            "classes": {
                "tb.Selector": 1,
                "tb": 1,
                "tb.Event": 1,
                "tb.tb.Model": 1
            },
            "fors": {},
            "namespaces": {
                "tb": 1,
                "tb.request": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "tb.Selector": {
            "name": "tb.Selector",
            "shortname": "tb.Selector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 42,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "",
                    "type": "Function|string|object|array"
                }
            ],
            "return": {
                "description": "- the twoBirds instance you just created\n\ntwoBirds selector constructor\n\nCAUTION: you may use this class directly if you know what you are doing,\nbut the correct syntax for call is simply:",
                "type": "Object"
            },
            "example": [
                "\n\n    tb( pSelector )\n       .whateverChainedMethod(); // etc.\n\nHINT: tb() works as a selector, new tb() instanciates a twoBirds instance from a class.",
                "\n\n    // get tB instances from DOM by css query selector\n    tb( 'div' )            // any tbInstance that sits in a div dom node\n\n    // get tB instances from DOM by constructor\n    tb( app.sampleConstructor )     // any tbInstance in DOM that is instanceof sampleConstructor\n\n    // get tB instances from DOM by regEx\n    tb( /myRegEx/ )    // any tbInstance in DOM that has a namespace property that fits the regEx\n\n    // get tB instances from DOM by array of selectors\n    tb( [ 'body', /myRegEx/ ] )     // any combination of selectors in an array, result is additive, flat and unique\n"
            ]
        },
        "tb": {
            "name": "tb",
            "shortname": "tb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 200,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pOptions",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pClass",
                            "description": "- class Namespace as string or class"
                        },
                        {
                            "name": "pConfig",
                            "description": "- optional configuration, any type, preferrably object",
                            "optional": true
                        },
                        {
                            "name": "pTarget",
                            "description": "- target to put object in, DOM node or any other object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "- the twoBirds instance you just created\n\ntwoBirds constructor",
                "type": "Object"
            },
            "example": [
                "\n\n    // put Instance into DOM node\n    new tb(\n        app.myConstructor,                                     // any constructor you want to have an instance of\n        { ... },                                               // the config object you hand over to the constructor\n        target.appendChild( document.createElement( 'span' ) ) // DOM node to insert the object item\n    );\n\n    // put Instance anywhere\n    new tb(\n        app.myConstructor,            // any constructor you want to have an instance of\n        { ... },                      // the config object you hand over to the constructor\n        anotherTbInstance           // any other object you want to put the tb instance in\n    );\n\n    // if a namespace STRING is given, requirement loading is done in case the class isnt present yet\n        new tb(\n        'app.myConstructor',          // namespace string for the constructor you want to have an instance of\n        { ... },                      // the config object you hand over to the constructor\n        anotherTbInstance          // any other object you want to put the tb instance in\n    );\n"
            ]
        },
        "tb.Event": {
            "name": "tb.Event",
            "shortname": "tb.Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tb",
            "file": "src/tb/tb.js",
            "line": 1385,
            "description": "standard twobirds event, internal use only",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "ignore": "",
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of event",
                    "type": "String"
                },
                {
                    "name": "pEventData",
                    "description": "- data to be appended to this event",
                    "type": "*",
                    "optional": true
                },
                {
                    "name": "pBubble",
                    "description": "- bubbling indicator, 'l' = local, 'u' = up, 'd' = down or any combination",
                    "type": "String",
                    "optional": true,
                    "optdefault": "l"
                }
            ],
            "return": {
                "description": "tb.Event instance",
                "type": "Object"
            }
        },
        "tb.tb.Model": {
            "name": "tb.tb.Model",
            "shortname": "tb.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "tb",
            "file": "src/tb/tb.js",
            "line": 1733,
            "description": "tb.Model constructor\ncreate and return a simple CRUD model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pConfig",
                    "description": "- config parameter, usually an object @todo: variant is no valid data type",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- the model instance",
                "type": "Object"
            }
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/tb/tb.js",
            "line": 3,
            "description": "twoBirds V7 core functionality",
            "author": "frank.thuerigen <frank_thuerigen@yahoo.de>",
            "copyright": "copyright (c) 2006- Frank Th√ºrigen",
            "license": "http://www.gnu.org/copyleft/gpl.html GNU GPL v3",
            "class": "tb.Selector"
        },
        {
            "file": "src/tb/tb.js",
            "line": 427,
            "description": "walk all pSelector tb objects, call pMethodName on them\nreturn a UNIQUE TbSelector result set containing all single results",
            "itemtype": "method",
            "name": "walkSelector",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pSelectorObject",
                    "description": "- instanceOf TbSelector",
                    "type": "Object"
                },
                {
                    "name": "pMethodName",
                    "description": "- name of method to call",
                    "type": "String"
                },
                {
                    "name": "pArguments",
                    "description": "- arguments",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "instance of TbSelector",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 487,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "pKey",
                    "description": "- name of the property",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pValue",
                    "description": "- any kind of value associated with the key",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\nset() method\n\nsets an instance property",
                "type": "Object"
            },
            "example": [
                "\n\n   var a = new tb(...); // create a tB instance\n   a.set( 'x': 42 );\n"
            ],
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 529,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "pKey",
                    "description": "- name of the property",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "any value stored in property, or undefined\n\nget() method\n\nget an instance property"
            },
            "example": [
                "\n\n    var a = new tb(...); // create a tB instance\n    a.get( 'x' );\n"
            ],
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 563,
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "pEvent",
                    "description": "- name of event OR tb.Event instance (in this case the only parameter)",
                    "type": "String"
                },
                {
                    "name": "pEventData",
                    "description": "- event data, usally an object",
                    "optional": true
                },
                {
                    "name": "pBubble",
                    "description": "- bubbling indicator : 'l' = local, 'u' = up, 'd' = down - or any combination",
                    "type": "String",
                    "optional": true,
                    "optdefault": "l"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\ntrigger method\n\ntriggers an asynchronous twoBirds event, optionally with data and bubble indicator",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 715,
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the handler function",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- the function to be added to the handler array",
                    "type": "Function"
                },
                {
                    "name": "pOnce",
                    "description": "- true = remove handler after first call, false = keep handler",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\n.on() method\n\nadds a handler to a twoBirds instance or a tb.Selector result set",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 763,
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the handler function",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- the function to be added to the handler array",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\n.one() method\n\nadds a handler to a twoBirds instance or a tb.Selector result set,\nto be called only once when the event fires\nafterwards the handler is deleted from the event handler list",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 787,
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the handler function",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- the function to be added to the handler array",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\n.off() method\n\nremoves a handler from a twoBirds instance or a tb.Selector result set\nafterwards the handler is deleted from the event handler list",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 837,
            "itemtype": "method",
            "name": "parents",
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.parents() method\n\nfor each this[0...n] or this as tb() instance,\n- get all parent tb objects\n- check them against the filter param pSelector\n- return them as a TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 898,
            "itemtype": "method",
            "name": "parent",
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.parent() method\n\nfor each this[0...n] or this as tb() instance,\n- get closest parent tb object\n- check all of them against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 948,
            "itemtype": "method",
            "name": "descendants",
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.descendants() method\n\nfor each this[0...n] or this as tb() instance,\n- get all descendants of tb object\n- check them against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1005,
            "itemtype": "method",
            "name": "children",
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                },
                {
                    "name": "pLocalOnly",
                    "description": "- only local children of given tb instance(s)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.children() method\n\nfor each this[0...n] or this as tb() instance,\n- get all direct children of tb object\n- check them against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1059,
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nnext() method\n\nfor each this[0...n] or this as tb() instance,\n- get the direct following sibling of tb instance\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1096,
            "itemtype": "method",
            "name": "prev",
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nprev() method\n\nfor each this[0...n] or this as tb() instance,\n- get the direct previous sibling of tb instance\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1133,
            "itemtype": "method",
            "name": "first",
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nfirst() method\n\nfor each this[0...n] or this as tb() instance,\n- get the first child of the tb object parent\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1166,
            "itemtype": "method",
            "name": "last",
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nlast() method\n\nfor each this[0...n] or this as tb() instance,\n- get the last child of the tb object parent\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1192,
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "- TbSelector elements in a plain array\n\ntoArray() method",
                "type": "Array"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1206,
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nfilter() method\n\nfor each this[0...n] or this as tb() instance,\n- check them against the filter param pParam\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1247,
            "itemtype": "method",
            "name": "not",
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nnot() method\n\nfor each this[0...n] or this as tb() instance,\n- check them against pSelector and remove all that match\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1289,
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nis() method\n\nfor each this[0...n] or this as tb() instance,\n- check them against tbSelector( pParam ) and remove all that DO NOT match\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1330,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nadd() method\n\nadd elements to current result set\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1409,
            "description": "stop propagation after all handlers on this object have run\n     *",
            "itemtype": "method",
            "name": "stopPropagation\n     *",
            "return": {
                "description": "tb.Event object",
                "type": "Object"
            },
            "class": "tb.Event"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1421,
            "description": "stop propagation immediately after this handler has run\n     *",
            "itemtype": "method",
            "name": "stopImmediatePropagation\n     *",
            "return": {
                "description": "tb.Event object",
                "type": "Object"
            },
            "class": "tb.Event"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1463,
            "description": "stops event handling",
            "itemtype": "method",
            "name": "stop",
            "static": 1,
            "params": [
                {
                    "name": "pStopit",
                    "description": "- indicating whether to stop event handling",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "- true if event handling stopped, else false",
                "type": "Boolean"
            },
            "class": "tb.Event",
            "namespace": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1483,
            "description": "returns a unique id",
            "itemtype": "method",
            "name": "getId",
            "static": 1,
            "return": {
                "description": "- unique id",
                "type": "String"
            },
            "class": "tb.Event",
            "namespace": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1498,
            "description": "tb.namespace() function\n\nsample calls:\ntb.namespace( 'app.Dashboard' ) gets the constructor for dashboard\n\nand in the dashboard constructor:\n\ntb.namespace( 'app', true ).Dashboard = function(){ ...",
            "itemtype": "method",
            "name": "namespace",
            "static": 1,
            "params": [
                {
                    "name": "pNamespace",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "pForceCreation",
                    "description": "- true => force creation of namespace object if it didnt exist before",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "pObject",
                    "description": "- object to scan",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "namespaceObject",
                "type": "Object"
            },
            "class": "tb.Event",
            "namespace": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1556,
            "description": "tb.bind() function\n\nsample calls:\n\ntb.bind( document.body )\n\n- scans the given element and all of its descendants\n  in the DOM and looks for attributes \"data-tb\" in the nodes.\n- resulting list will be scanned for those nodes that do not already\n  have an tb object inside.\n- creates a new tb object based on the class namespace given\n  in the \"data-tb\" attribute\n- stores it in the DOM element\n\ntb.bind( document.body, 'n1.n2.<className>' [ , <config data> ] )\n\n- creates a new tb object based on the 2nd parameter, giving 3rd as constructor parameter\n- stores it in the DOM element\nTHIS VARIANT WILL overwrite ANY tbo OBJECT THAT ALREADY RESIDES IN THE DOM NODE!",
            "itemtype": "method",
            "name": "bind",
            "static": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "DOM node",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "tb.Event",
            "namespace": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1639,
            "description": "function tb.observable()\n\n- creates a function\n- initializes a value to observe\n- returns this function\n\nsample calls:\n\no = tb.observable( {} );\no( { newData: 'newData' } ); // change observable value\no.observe( function(){ ... }, true ); // will be triggered when observable value changes, true indicates only once",
            "itemtype": "method",
            "name": "observable",
            "static": 1,
            "params": [
                {
                    "name": "pStartValue",
                    "description": "- initial content of observable",
                    "type": "*"
                }
            ],
            "return": {
                "description": "observableFunction",
                "type": "Function"
            },
            "class": "tb.Event",
            "namespace": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1906,
            "description": "tb.extend() function\nextend an object by another objects properties, always a deep copy",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "pObj",
                    "description": "- object to extend",
                    "type": "Object"
                },
                {
                    "name": "pSrc",
                    "description": "- other object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- other object",
                "type": "Object"
            },
            "class": "tb.Model",
            "namespace": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1946,
            "description": "tb.parse() function\nfor each key/value in pObject, check string for {key}\nreplace occurence with <value>",
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "params": [
                {
                    "name": "pText",
                    "description": "- the text to parse",
                    "type": "String"
                },
                {
                    "name": "pParse",
                    "description": "- hash object containing replacement key/<value>\n //@todo: missing parm description",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- result string",
                "type": "String"
            },
            "class": "tb.Model",
            "namespace": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2004,
            "description": "requirement handling",
            "class": "tb.Model",
            "namespace": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2321,
            "memberof": "tb",
            "field": "",
            "description": "the twoBirds request object",
            "class": "tb.request.tb.Model",
            "namespace": "tb.request"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2328,
            "class": "tb.request.tb.Model",
            "namespace": "tb.request"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2372,
            "class": "tb.request.tb.Model",
            "namespace": "tb.request"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2389,
            "class": "tb.request.tb.Model",
            "namespace": "tb.request"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2411,
            "class": "tb.request.tb.Model",
            "namespace": "tb.request"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2436,
            "class": "tb.request.tb.Model",
            "namespace": "tb.request"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2450,
            "class": "tb.request.tb.Model",
            "namespace": "tb.request"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2478,
            "name": "",
            "itemtype": "method",
            "params": [
                {
                    "name": "pOptions",
                    "description": "a hash object containing these options:<br><br><br>",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url:",
                            "description": "(string, omitted) the URL to call"
                        },
                        {
                            "name": "params:",
                            "description": "(object, optional) a hash object containing the parameters to post"
                        },
                        {
                            "name": "method:",
                            "description": "(string, optional, defaults to 'POST') the XHR method"
                        },
                        {
                            "name": "headers:",
                            "description": "(object, optional) a hash object containing additional XHR headers"
                        },
                        {
                            "name": "success:",
                            "description": "(function, optional) the function to call with the request result"
                        },
                        {
                            "name": "error:",
                            "description": "(function, optional) the function to call if request status not in 200...299"
                        },
                        {
                            "name": "statechange:",
                            "description": "(function, deprecated, optional) the function to call when readyState changes"
                        },
                        {
                            "name": "timeout:",
                            "description": "(object, optional ) structure sample: <br>\ncb: callback to run when timeout occurs<br>\nms: number of milliseconds the request will run before being terminated",
                            "type": "Cb: myFunction, ms:10000"
                        },
                        {
                            "name": "cachable:",
                            "description": "(boolean, deprecated, optional) defaults to true, indicates whether or not to include a unique id in URL"
                        },
                        {
                            "name": "async:",
                            "description": "(boolean, optional, defaults to true) whether or not to make an asynchronous request"
                        }
                    ]
                }
            ],
            "return": {
                "description": "a twoBirds request object\n     *"
            },
            "class": "tb.request.tb.Model",
            "namespace": "tb.request"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2618,
            "description": "document.ready bootstrap",
            "class": "tb.request.tb.Model",
            "namespace": "tb.request"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2648,
            "description": "tb.dom() function\njquery like selector engine",
            "itemtype": "method",
            "name": "dom",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "selector string, a dom node or an array of dom nodes",
                    "type": "String|domNode|array"
                }
            ],
            "return": {
                "description": "- result string",
                "type": "String"
            },
            "class": "tb.tb.Model",
            "namespace": "tb"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: copyright",
            "line": " src/tb/tb.js:3"
        },
        {
            "message": "unknown tag: license",
            "line": " src/tb/tb.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/tb/tb.js:42"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/tb/tb.js:200"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:427"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/tb/tb.js:1385"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:1463"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:1483"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:1498"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:1556"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:1639"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:1906"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:1946"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:2321"
        },
        {
            "message": "unknown tag: field",
            "line": " src/tb/tb.js:2321"
        },
        {
            "message": "unknown tag: name",
            "line": " src/tb/tb.js:2478"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:2478"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/tb/tb.js:2478"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:2648"
        },
        {
            "message": "Missing item type\ntwoBirds V7 core functionality",
            "line": " src/tb/tb.js:3"
        },
        {
            "message": "Missing item type\nrequirement handling",
            "line": " src/tb/tb.js:2004"
        },
        {
            "message": "Missing item type\nthe twoBirds request object",
            "line": " src/tb/tb.js:2321"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:2328"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:2372"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:2389"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:2411"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:2436"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:2450"
        },
        {
            "message": "Missing item type\ndocument.ready bootstrap",
            "line": " src/tb/tb.js:2618"
        }
    ]
}