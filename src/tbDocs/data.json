{
    "project": {
        "name": "twoBirds",
        "description": "twoBirds WebComponent Framework",
        "version": "v8.0.1",
        "url": "http://www.tb-core.org"
    },
    "files": {
        "src/tb/tb.js": {
            "name": "src/tb/tb.js",
            "modules": {},
            "classes": {
                "tb.Selector": 1,
                "tb": 1,
                "tb.Event": 1,
                "tb.dom": 1,
                "tb.Util": 1,
                "tb.Promise": 1,
                "tb.Require": 1,
                "tb.CRUD": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "tb.Selector": {
            "name": "tb.Selector",
            "shortname": "tb.Selector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 48,
            "is_constructor": 1,
            "extends": "tb",
            "params": [
                {
                    "name": "pSelector",
                    "description": "",
                    "type": "Function|string|object|array"
                },
                {
                    "name": "pDomNode",
                    "description": "- optional, the DOM node in which to search",
                    "type": "DomNode",
                    "optional": true
                }
            ],
            "return": {
                "description": "- the twoBirds instance you just created\n\ntwoBirds selector constructor\n\nCAUTION: you may use this class directly if you know what you are doing,\nbut the correct syntax for call is simply:",
                "type": "Object"
            },
            "example": [
                "\n\n    tb( pSelector )\n       .whateverChainedMethod(); // etc.\n\nHINT: tb() works as a selector, new tb() instanciates a twoBirds instance from a class.",
                "\n\n    // get tB instances from DOM by css query selector\n    tb( 'div' )            // any tbInstance that sits in a div dom node\n\n    // get tB instances from DOM by constructor\n    tb( app.sampleConstructor )     // any tbInstance in DOM that is instanceof sampleConstructor\n\n    // get tB instances from DOM by regEx\n    tb( /myRegEx/ )    // any tbInstance in DOM that has a namespace property that fits the regEx\n\n    // get tB instances from DOM by array of selectors\n    tb( [ 'body', /myRegEx/ ] )     // any combination of selectors in an array, result is additive, flat and unique\n"
            ]
        },
        "tb": {
            "name": "tb",
            "shortname": "tb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 215,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pOptions",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pClass",
                            "description": "- class Namespace as string or class"
                        },
                        {
                            "name": "pConfig",
                            "description": "- optional configuration, any type, preferrably object",
                            "optional": true
                        },
                        {
                            "name": "pTarget",
                            "description": "- target to put object in, DOM node or any other object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "- the twoBirds instance you just created\n\ntwoBirds constructor",
                "type": "Object"
            },
            "example": [
                "\n\n    // put Instance into DOM node\n    new tb(\n        app.myConstructor,                                     // any constructor you want to have an instance of\n        { ... },                                               // the config object you hand over to the constructor\n        target.appendChild( document.createElement( 'span' ) ) // DOM node to insert the object item\n    );\n\n    // put Instance anywhere\n    new tb(\n        app.myConstructor,            // any constructor you want to have an instance of\n        { ... },                      // the config object you hand over to the constructor\n        anotherTbInstance             // any other object you want to put the tb instance in\n    );\n\n    // if a namespace STRING is given, requirement loading is done in case the class isnt present yet\n    new tb(\n        'app.myConstructor',          // namespace string for the constructor you want to have an instance of\n        { ... },                      // the config object you hand over to the constructor\n        anotherTbInstance             // any other object you want to put the tb instance in\n    );\n"
            ]
        },
        "tb.Event": {
            "name": "tb.Event",
            "shortname": "tb.Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 1612,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of event",
                    "type": "String"
                },
                {
                    "name": "pEventData",
                    "description": "- data to be appended to this event",
                    "optional": true
                },
                {
                    "name": "pBubble",
                    "description": "- bubbling indicator, 'l' = local, 'u' = up, 'd' = down or any combination",
                    "type": "String",
                    "optional": true,
                    "optdefault": "l"
                }
            ],
            "return": {
                "description": "tb.Event instance",
                "type": "Object"
            }
        },
        "tb.dom": {
            "name": "tb.dom",
            "shortname": "tb.dom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 1749,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "a .querySelectorAll() selector string, a dom node or an array of dom nodes",
                    "optional": true
                },
                {
                    "name": "pDomNode",
                    "description": "- DOM node to start search in",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ntb.dom() function\n\njquery like selector engine",
                "type": "Object"
            }
        },
        "tb.Util": {
            "name": "tb.Util",
            "shortname": "tb.Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 3435,
            "description": "placeholder class, everything contained herein is a curry property of the tb() constructor"
        },
        "tb.Promise": {
            "name": "tb.Promise",
            "shortname": "tb.Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 4019,
            "description": "- Promise/A+ compliant promise functionality",
            "memberof": "tb",
            "static": 1,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pFunction",
                    "description": "function to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Promise/A+ compliant promise object",
                "type": "Object"
            },
            "example": [
                "\n\n       var p = new tb.Promise(function(resolve, reject){\n\n           setTimeout(function(){\n               resolve('it worked.');\n           },1000)\n\n           setTimeout(function(){\n               reject('something went wrong.');\n           },500)\n\n       }).then(function(pValue){\n\n           console.log('Yippie! ', pValue);\n\n       }).catch(function(pValue){\n\n           console.log('Oops? ', pValue);\n\n       }).finally(function(pValue){\n\n           console.log('Cleaning up ', pValue);\n\n       });\n"
            ]
        },
        "tb.Require": {
            "name": "tb.Require",
            "shortname": "tb.Require",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 4539,
            "memberof": "tb",
            "static": 1,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pRequiredFiles",
                    "description": "string or string array containing required files",
                    "type": "(string|string[])"
                }
            ],
            "return": {
                "description": "Promise/A+ compliant promise object\n\ntb.Require class ( uses tb.require function and returns the promise returned by it )\n\n- add into prototype of your constructor\n- instance will get an 'init' event when all files have loaded.",
                "type": "Object"
            },
            "example": [
                "\n\n    tb.namespace( 'app.GrandParent' ).set( \n        (function(){\n\n             // Constructor\n             function GrandParent(){\n                 var that = this;\n   \n                 that.handlers = {\n                     init\n                 };\n   \n             }\n   \n             // Prototype\n             GrandParent.prototype = {\n   \n                 namespace: 'app.GrandParent',\n   \n                 'tb.Require': [\n                      '/app/GrandParent.css'\n                 ]\n   \n             };\n   \n             return GrandParent;\n   \n             // Private Methods\n   \n             function init(){\n                  // will be called when requirement loading is finished ( both success and error )\n             }\n   \n        })()\n    );"
            ]
        },
        "tb.CRUD": {
            "name": "tb.CRUD",
            "shortname": "tb.CRUD",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tb/tb.js",
            "line": 5235,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pConfig",
                    "description": "- config parameter, usually an object @todo param description",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- the model instance\n\ntb.CRUD constructor\n- create and return a simple CRUD model a \"data\" observable",
                "type": "Object"
            },
            "example": [
                "\n\n    // templates crud model\n    that.templatesCRUD = new tb.CRUD({\n       'read': {\n           url: 'demoapp/configuration/mock/demoapp-configuration-templates.json', // mock data\n           method: 'GET',\n           type: 'json',\n           success: function( pResult ){\n               that.templatesCRUD.data( JSON.parse( pResult.text ).data );\n           },\n           error: function( pResult ){\n               console.log( 'an error occured', pResult );\n           }\n       }\n    });\n\n    // ... and later:\n\n    // when template list data has been read, render\n    that.templatesCRUD.data.observe( function templateCRUDDataChanged(){\n       that.trigger( 'render' );\n    });\n\n    // read data\n    that.templatesCRUD.read({\n       // parameters ...\n    });",
                "\n\n    // default config mixin -> result will be in that.config\n    // just for documentation purposes, will be done by the CRUD model itself\n\n    tb.extend(\n        that.config,\n        {   // default settings, reference only\n            'create': {\n                url: '',\n                method: 'POST',\n                success: function( pResult ){\n                    that.data( pResult );\n                }\n            },\n            'read': {\n                url: '',\n                method: 'GET',\n                success: function( pResult ){\n                    that.data( pResult );\n                }\n            },\n            'update': {\n                url: '',\n                method: 'PUT',\n                success: function( pResult ){\n                    that.data( pResult );\n                }\n            },\n            'delete': {\n                url: '',\n                method: 'DELETE',\n                success: function( pResult ){\n                    that.data( pResult );\n                }\n            }\n        },\n        pConfig // params as given to the constructor \n    );\n"
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/tb/tb.js",
            "line": 3,
            "description": "twoBirds V7 core functionality",
            "author": "frank.thuerigen <frank_thuerigen@yahoo.de>",
            "copyright": "copyright (c) 2006- Frank Thürigen",
            "license": "GNU LGPL v3 - read LICENSE.txt",
            "class": "tb.Selector"
        },
        {
            "file": "src/tb/tb.js",
            "line": 455,
            "description": "walk all pSelector tb objects, call pMethodName on them\nreturn a UNIQUE TbSelector result set containing all single results",
            "itemtype": "method",
            "name": "walkSelector",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pSelectorObject",
                    "description": "- instanceOf TbSelector",
                    "type": "Object"
                },
                {
                    "name": "pMethodName",
                    "description": "- name of method to call",
                    "type": "String"
                },
                {
                    "name": "pArguments",
                    "description": "- arguments",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "instance of TbSelector",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 528,
            "itemtype": "method",
            "name": "set",
            "chainable": 1,
            "params": [
                {
                    "name": "pKey",
                    "description": "- name of the property",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pValue",
                    "description": "- any kind of value associated with the key",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\nset() method\n\nsets an instance property",
                "type": "Object"
            },
            "example": [
                "\n\nvar a = new tb(...); // create a tB instance\na.set( 'x': 42 );\n"
            ],
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 571,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "pKey",
                    "description": "- name of the property",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "any value stored in property, or undefined\n\nget() method\n\nget an instance property"
            },
            "example": [
                "\n\n    var a = new tb(...); // create a tB instance\n    a.get( 'x' );\n"
            ],
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 605,
            "itemtype": "method",
            "name": "trigger",
            "chainable": 1,
            "params": [
                {
                    "name": "pEvent",
                    "description": "- name of event OR tb.Event instance (in this case the only parameter)",
                    "type": "String"
                },
                {
                    "name": "pEventData",
                    "description": "- event data, usally an object",
                    "optional": true
                },
                {
                    "name": "pBubble",
                    "description": "- bubbling indicator : 'l' = local, 'u' = up, 'd' = down - or any combination",
                    "type": "String",
                    "optional": true,
                    "optdefault": "l"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\ntrigger method\n\ntriggers an asynchronous twoBirds event, optionally with data and bubble indicator",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 754,
            "itemtype": "method",
            "name": "on",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the handler function",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- the function to be added to the handler array",
                    "type": "Function"
                },
                {
                    "name": "pOnce",
                    "description": "- true = remove handler after first call, false = keep handler",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\n.on() method\n\nadds a handler to a twoBirds instance or a tb.Selector result set",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 807,
            "itemtype": "method",
            "name": "one",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the handler function",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- the function to be added to the handler array",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\n.one() method\n\nadds a handler to a twoBirds instance or a tb.Selector result set,\nto be called only once when the event fires\nafterwards the handler is deleted from the event handler list",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 832,
            "itemtype": "method",
            "name": "off",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the handler function",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- the function to be added to the handler array",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- tb.Selector instance or tB instance - for chaining\n\n.off() method\n\nremoves a handler from a twoBirds instance or a tb.Selector result set\nafterwards the handler is deleted from the event handler list",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 902,
            "itemtype": "method",
            "name": "parents",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.parents() method\n\nfor each this[0...n] or this as tb() instance,\n- get all parent tb objects\n- check them against the filter param pSelector\n- return them as a TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 967,
            "itemtype": "method",
            "name": "parent",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.parent() method\n\nfor each this[0...n] or this as tb() instance,\n- get closest parent tb object\n- check all of them against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1021,
            "itemtype": "method",
            "name": "descendants",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.descendants() method\n\nfor each this[0...n] or this as tb() instance,\n- get all descendants of tb object\n- check them against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1080,
            "itemtype": "method",
            "name": "children",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any type of tb.Selector parameter",
                    "optional": true
                },
                {
                    "name": "pLocalOnly",
                    "description": "- only local children of given tb instance(s)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance - for chaining\n\n.children() method\n\nfor each this[0...n] or this as tb() instance,\n- get all direct children of tb object\n- check them against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1145,
            "itemtype": "method",
            "name": "next",
            "chainable": 1,
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nnext() method\n\nfor each this[0...n] or this as tb() instance,\n- get the direct following sibling of tb instance\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1183,
            "itemtype": "method",
            "name": "prev",
            "chainable": 1,
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nprev() method\n\nfor each this[0...n] or this as tb() instance,\n- get the direct previous sibling of tb instance\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1221,
            "itemtype": "method",
            "name": "first",
            "chainable": 1,
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nfirst() method\n\nfor each this[0...n] or this as tb() instance,\n- get the first child of the tb object parent\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1255,
            "itemtype": "method",
            "name": "last",
            "chainable": 1,
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nlast() method\n\nfor each this[0...n] or this as tb() instance,\n- get the last child of the tb object parent\n- check it against the filter param pSelector\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1282,
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "- TbSelector elements in a plain array\n\ntoArray() method",
                "type": "Array"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1295,
            "itemtype": "method",
            "name": "filter",
            "chainable": 1,
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nfilter() method\n\nfor each this[0...n] or this as tb() instance,\n- check them against the filter param pParam\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1337,
            "itemtype": "method",
            "name": "not",
            "chainable": 1,
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nnot() method\n\nfor each this[0...n] or this as tb() instance,\n- check them against pSelector and remove all that match\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1370,
            "itemtype": "method",
            "name": "add",
            "chainable": 1,
            "params": [
                {
                    "name": "pParam",
                    "description": "- any kind of TbSelector parameter",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.Selector instance (maybe empty) - for chaining\n\nadd() method\n\nadd elements to current result set\n- return TbSelector result set (unique)",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1392,
            "itemtype": "method",
            "name": "flush",
            "chainable": 1,
            "return": {
                "description": "- mpty tb.Selector instance - for chaining\n\nflush() method\n\nempty current result set\n- return empty TbSelector result set",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1420,
            "itemtype": "method",
            "name": "concat",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1430,
            "itemtype": "method",
            "name": "every",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every\">every</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1440,
            "itemtype": "method",
            "name": "forEach",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">forEach</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1450,
            "itemtype": "method",
            "name": "indexOf",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">indexOf</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1459,
            "itemtype": "method",
            "name": "map",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1468,
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "- tb instance\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">pop</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1477,
            "itemtype": "method",
            "name": "push",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">push</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1486,
            "itemtype": "method",
            "name": "reduce",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">reduce</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1495,
            "itemtype": "method",
            "name": "reduceRight",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\">reduceRight</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1504,
            "itemtype": "method",
            "name": "reverse",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">reverse</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1513,
            "itemtype": "method",
            "name": "shift",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\">shift</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1522,
            "itemtype": "method",
            "name": "slice",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">slice</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1531,
            "itemtype": "method",
            "name": "some",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">some</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1540,
            "itemtype": "method",
            "name": "splice",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">splice</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1549,
            "itemtype": "method",
            "name": "unshift",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\">unshift</a>",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1568,
            "itemtype": "method",
            "name": "unique",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nforce this tb() result set to be unique\n\n( being called after using methods inherited from array, force uniqueness )",
                "type": "Object"
            },
            "class": "tb"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1632,
            "itemtype": "method",
            "name": "stopPropagation",
            "return": {
                "description": "tb.Event object\n\nstop propagation after all handlers on this object have run",
                "type": "Object"
            },
            "class": "tb.Event"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1644,
            "itemtype": "method",
            "name": "stopImmediatePropagation",
            "return": {
                "description": "tb.Event object\n\nstop propagation immediately after this handler has run",
                "type": "Object"
            },
            "class": "tb.Event"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1663,
            "description": "document.ready bootstrap",
            "class": "tb.Event"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1864,
            "itemtype": "method",
            "name": "concat",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1874,
            "itemtype": "method",
            "name": "every",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every\">every</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1884,
            "itemtype": "method",
            "name": "forEach",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">forEach</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1894,
            "itemtype": "method",
            "name": "indexOf",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">indexOf</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1903,
            "itemtype": "method",
            "name": "map",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1912,
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">pop</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1921,
            "itemtype": "method",
            "name": "push",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">push</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1930,
            "itemtype": "method",
            "name": "reduce",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">reduce</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1939,
            "itemtype": "method",
            "name": "reduceRight",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\">reduceRight</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1948,
            "itemtype": "method",
            "name": "reverse",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">reverse</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1957,
            "itemtype": "method",
            "name": "shift",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\">shift</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1966,
            "itemtype": "method",
            "name": "slice",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">slice</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1975,
            "itemtype": "method",
            "name": "some",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">some</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1984,
            "itemtype": "method",
            "name": "splice",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">splice</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 1993,
            "itemtype": "method",
            "name": "unshift",
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ninherited from Array, see <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\">unshift</a>",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2038,
            "itemtype": "method",
            "name": "add",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nadd all nodes in tb.dom( pSelector ) result set to tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2086,
            "itemtype": "method",
            "name": "addClass",
            "chainable": 1,
            "params": [
                {
                    "name": "pClassName",
                    "description": "- class name(s) to add, separated by ' '",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nadd class name to each of tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2136,
            "itemtype": "method",
            "name": "append",
            "chainable": 1,
            "params": [
                {
                    "name": "pElement",
                    "description": "- an array like set of DOM nodes, or a single DOM node"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nappends given DOM nodes to every node in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2167,
            "itemtype": "method",
            "name": "appendTo",
            "params": [
                {
                    "name": "pElement",
                    "description": "- a dom node or tb.dom() result set\n\nappends all elements in this result set to DOM node or tb.dom(...)[0] first element of result set"
                }
            ],
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2191,
            "itemtype": "method",
            "name": "attr",
            "chainable": 1,
            "params": [
                {
                    "name": "pKey",
                    "description": "- if string: DOM node attribute name; if object: hash of attributeName: attributeValue"
                },
                {
                    "name": "pValue",
                    "description": "- value to set in DOM node(s)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nset of get attribute values to each DOM node in give tb.dom() result set\n\nHINT:\nif pKey is a string and pValue is not given its a GET\nif pKey is an object or pKey(string) and pValue(string) are given, it is a SET. ONLY THEN this is CHAINABLE.",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2253,
            "itemtype": "method",
            "name": "children",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreturn child nodes of tb.dom() result set, that match nodes in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2288,
            "itemtype": "method",
            "name": "clean",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\n- normalizes text nodes\n- removes comment nodes",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2323,
            "itemtype": "method",
            "name": "descendants",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreturn all descendant nodes of tb.dom() result set, that match nodes in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2361,
            "itemtype": "method",
            "name": "empty",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremoves one or all DOM event handlers from each element in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2381,
            "itemtype": "method",
            "name": "filter",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- tb.dom() selector to match against or [].filter.call( this, function() )",
                    "type": "..."
                }
            ],
            "return": {
                "description": "- tb.dom() result set\n\nmatch tb.dom() result set against pSelector filter",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2418,
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "pClass",
                    "description": "- class name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- true if class in className",
                "type": "Boolean"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2434,
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nhide all nodes in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2457,
            "itemtype": "method",
            "name": "html",
            "chainable": 1,
            "params": [
                {
                    "name": "pHtml",
                    "description": "- html string or empty string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreplace all nodes .innerHTML with pHtml",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2485,
            "itemtype": "method",
            "name": "insertBefore",
            "params": [
                {
                    "name": "pElement",
                    "description": "- a single DOM node or tb.dom() selector result set, [0] is taken\n\nprepends all elements in tb.dom() result set to given DOM node"
                }
            ],
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2517,
            "itemtype": "method",
            "name": "insertAfter",
            "params": [
                {
                    "name": "pElement",
                    "description": "- a single DOM node or tb.dom() selector result set, [0] is taken\n\ninserts all elements in tb.dom() result set after given DOM node"
                }
            ],
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2559,
            "itemtype": "method",
            "name": "not",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremove all nodes from this tb.dom() result set, that are in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2587,
            "itemtype": "method",
            "name": "off",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName(s)",
                    "description": "- name(s) of the event separated by ' '",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- callback far event",
                    "type": "Function"
                },
                {
                    "name": "pCapture",
                    "description": "- callback far event",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremoves one or all DOM event handlers from each element in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2629,
            "itemtype": "method",
            "name": "on",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName(s)",
                    "description": "- name(s) of the event separated by ' '",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- callback for event",
                    "type": "Function"
                },
                {
                    "name": "pCapture",
                    "description": "- indicates running in capture phase, that is top down",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ncreates a DOM event handler for each element in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2709,
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "pEventName(s)",
                    "description": "- name(s) of the event separated by ' '",
                    "type": "String"
                },
                {
                    "name": "pHandler",
                    "description": "- callback far event",
                    "type": "Function"
                },
                {
                    "name": "pCapture",
                    "description": "- indicates running in capture phase, that is top down",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "- the onceHandler function\n\ncreates a DOM event handler for each element in tb.dom() result set (to be called only once)\n\n- after the first call ALL event handlers that were attached to the dom elements are deleted automatically.\n- to remove all these onceHandlers manually, use the returned onceHandler and its .that property.\n- use",
                "type": "Function"
            },
            "example": [
                "\n\n    // create a handler\n    var f=function(){ \n        console.log('a'); \n    }\n\n    // attach handler to multiple divs\n    var oh = tb.dom( 'div' ) // each of the divs will respond with handlers, but afterwards all attached handlers are deleted\n        .one(\n            'click',\n            f\n        );\n\n    // use this if you want to remove certain onceHandlers manually ( not ALL of them which is next )\n    console.log( oh );   // the onceHandler function created\n    console.log( oh.that );   // the original tb.dom selection, used to delete some oh handlers manually if needed\n    console.log( oh.remove );  // the function that deletes ALL once handlers\n\n    // remove all handlers created by .one()\n    tb.dom( '.myBotton' )   // a click on a certain button will remove ALL onceHandlers\n        .one(\n            'click',\n            f.remove\n        );\n"
            ],
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2759,
            "itemtype": "method",
            "name": "parents",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreturn all parent nodes of tb.dom() result set, that match nodes in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2797,
            "itemtype": "method",
            "name": "parent",
            "chainable": 1,
            "params": [
                {
                    "name": "pSelector",
                    "description": "- any valid tb.dom() constructor parameter"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nreturn closest parent nodes of tb.dom() result set, that match nodes in tb.dom( pSelector ) result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2827,
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "params": [
                {
                    "name": "pDomElements",
                    "description": "- a tb.dom() selector result set",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.dom() result set containing removed DOM nodes\n\nremoves all elements in tb.dom() result set from DOM",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2848,
            "itemtype": "method",
            "name": "removeAttr",
            "chainable": 1,
            "params": [
                {
                    "name": "pKeys",
                    "description": "- attribute name(s) separated by ' '",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremove attribute(s) completely from tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2879,
            "itemtype": "method",
            "name": "removeClass",
            "chainable": 1,
            "params": [
                {
                    "name": "pClassName",
                    "description": "- class name(s) to remove, separated by ' '",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nremove class name from each of tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2929,
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nshow all nodes in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2949,
            "itemtype": "method",
            "name": "toArray",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set converted to a plain array of DOM nodes\n\nconvert tb.dom() result set converted to a plain array of DOM nodes",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2963,
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "pClassName",
                    "description": "- class name",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set\n\nif className is set in class attribute, it is deleted, otherwise it is set.",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 2989,
            "itemtype": "method",
            "name": "trigger",
            "chainable": 1,
            "params": [
                {
                    "name": "pEventName",
                    "description": "- name of the event",
                    "type": "String"
                },
                {
                    "name": "pData",
                    "description": "- optional data",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "pBubble",
                    "description": "- bubble event, default = true",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "pCancel",
                    "description": "- cancelable event, default = true, if false e.preventDefault() in handler will have no effect",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "- tb.dom() result set, may be empty\n\ncreates a DOM event for each element in tb.dom() result set",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3040,
            "itemtype": "method",
            "name": "unique",
            "chainable": 1,
            "return": {
                "description": "- tb.dom() result set, may be empty\n\nforce this tb.dom() result set to be unique ( HINT: if this is necessary, there is an error in twoBirds,\nand we would like to hear about it... )\n\nmethod is called internally though to force result set uniqueness",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3067,
            "itemtype": "method",
            "name": "val",
            "chainable": 1,
            "params": [
                {
                    "name": "pValue",
                    "description": "- value to set to DOM input type element",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[pValue] - value from input element [0] in tb.dom() result set\n\nif pValue given, it is a SET and the method is chainable\nif no pValue given, it is a GET and the method will return the value"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3280,
            "itemtype": "method",
            "name": "values",
            "params": [
                {
                    "name": "pValues",
                    "description": "- field values",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "- an object containing all values of a forms input fields\n\nget or set all form input values",
                "type": "Object"
            },
            "class": "tb.dom"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3444,
            "description": "- creates a function to set/get the inner value\n- initializes the inner value with the parameter given\n- returns this function",
            "memberof": "tb",
            "static": 1,
            "itemtype": "method",
            "name": "tb.observable",
            "chainable": 1,
            "params": [
                {
                    "name": "pStartValue",
                    "description": "initial content of observable",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "- observableFunction",
                "type": "Function"
            },
            "example": [
                "\n\n    // observable data IS NOT an object\n    var o = tb.observable( 0 );                // numeric\n\n    o.observe(\n        function( pValue ){                    // callback will be triggered when observable value changes\n            console.log( pValue );\n        },\n        true                                   // true indicates callback will be called only once\n    );\n\n    o( 5 );                                    // change observable value",
                "\n\n    // observable data IS an object\n    var o = tb.observable( { a: 5 } );         // object\n\n    o.observe(\n        function( pValue ){                    // callback will be triggered when observable value changes\n                    console.log( pValue );\n                },\n        false                                  // false or no parameter indicates callback will always be called\n                                               // when the data changes, true will trigger it only once\n    );\n\n    // get data:\n    o( 'a' );       // => 5\n    o();            // => { a: 5 }\n\n    // each of these will trigger the callback since the data changed\n    // also they return the observable itself for chaining purposes, NOT THE VALUE\n    o( 'a', 6 );               // => { a: 6 }\n    o( { c: 42 } );            // => { c: 42 }\n    o( 'b', { c: 42 } );       // => { a: 6, b: { c: 42 } }\n\n"
            ],
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3595,
            "memberof": "tb",
            "itemtype": "method",
            "name": "tb.namespace",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "pNamespace",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "pObject",
                    "description": "object to scan",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "containing set() / get() functions for property in pNamespace",
                "type": "Object"
            },
            "example": [
                "\n\n    // lookup [window] namespace:\n    tb.namespace( 'test.GrandParent' ); // gets the constructor for the GrandParent from DOM\n\n    // in a constructor force namespace creation:\n    tb.namespace( 'app.prop' ).set( 'testVal' );     // force creation of 'app.prop' if it doesnt exist, set value to 'testVal'",
                "\n\n    // lookup namespace in any object and return value:\n    tb.namespace( 'x.y', { x: { y: 42 } } ).get();     // 42",
                "\n\n    // create content in any object as denominated by namespace:\n    var obj = { x: { y: 42 } }\n    tb.namespace( 'x.z', obj ).set( 43 );     // obj => { x: { y: 42, z: 43 } }\n"
            ],
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3701,
            "memberof": "tb",
            "static": 1,
            "itemtype": "method",
            "name": "tb.attach",
            "params": [
                {
                    "name": "pRootNode",
                    "description": "DOM node to start binding in",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\n    tb.attach( document.body );\n    // scans the given element and all of its descendants\n    // in the DOM and looks for attributes \"data-tb\" in the nodes.\n\n    // Resulting list will be scanned for those nodes that do not already\n    // have a tb object inside which is given as a namespace in the data-tb attribute.\n\n    // Creates missing tb object based on the class namespace given\n    // in the \"data-tb\" attribute and stores it in the DOM element\n   "
            ],
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3756,
            "memberof": "tb",
            "static": 1,
            "itemtype": "property",
            "name": "tb.status",
            "type": "Object\n\ncontainer for twoBirds status observables",
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3765,
            "itemtype": "property",
            "name": "tb.status.loadCount",
            "type": "Function\n\nobservable containing the number of ( script load operations + xHr requests ) currently pending",
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3776,
            "memberof": "tb",
            "static": 1,
            "itemtype": "method",
            "name": "tb.idle",
            "params": [
                {
                    "name": "pCallback",
                    "description": "function to execute when all loading is finished",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\n   // in code...\n   tb.idle(\n       function(){\n           // do whatever you like\n       }\n   );"
            ],
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3840,
            "description": "returns a unique id",
            "memberof": "tb",
            "static": 1,
            "itemtype": "method",
            "name": "tb.getId",
            "return": {
                "description": "- unique id",
                "type": "String"
            },
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3856,
            "description": "- takes any number of objects as parameters\n- merges content into the first parameter object\n- always a deep copy",
            "memberof": "tb",
            "static": 1,
            "itemtype": "method",
            "name": "tb.extend",
            "params": [
                {
                    "name": "pObj",
                    "description": "- object to extend",
                    "type": "Object"
                },
                {
                    "name": "pObj",
                    "description": "any number of other objects to merge in",
                    "type": "...object",
                    "optional": true
                }
            ],
            "return": {
                "description": "- extended object",
                "type": "Object"
            },
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 3907,
            "description": "- will replace all matching {namespace1.namespace2.etc} occurrences with values from pParse object\n - if typeof pWhat is object or array, it will be done with all strings contained therein and the original pWhat returned",
            "memberof": "tb",
            "static": 1,
            "itemtype": "method",
            "name": "tb.parse",
            "params": [
                {
                    "name": "pWhat",
                    "description": "string, object or array to parse recursively",
                    "type": "(string|object|array)"
                },
                {
                    "name": "pParse",
                    "description": "any number of hash objects containing replacement key/value pairs",
                    "type": "...object"
                }
            ],
            "return": {
                "description": "pWhat parsed",
                "type": "(string|object|array)"
            },
            "example": [
                "\n    tb.parse( \"{a} test test\", { a: 'done' } )\n     // \"done test test\"",
                "\n    tb.parse( [ \"{a} test test\" ], { a: 'done' } )\n     // [\"done test test\"]",
                "\n    tb.parse( [ \"{a} test test\", \"{b} test test\" ], { a: 'done', b: 'processed' } )\n     // [\"done test test\", \"processed test test\"]",
                "\n    tb.parse( [ \"{a} test test\", \"{b} test test\", { g: \"another {silly} test\" } ], { a: 'done', b: 'processed', silly: 'not so silly' } )\n     // [\"done test test\", \"processed test test\", Object { g=\"another not so silly test\"}]",
                "\n    tb.parse( { a: \"{a} test test\", b: \"{b} test test\", c: [ \"another {silly} test\" ] }, { a: 'done', b: 'processed', silly: 'not so silly' } )\n     // Object { a=\"done test test\",  b=\"processed test test\",  c=[ \"another not so silly test\" ] }",
                "\n    // multiple hash objects:\n     tb.parse(\n        \"{a} {b}\",\n        { a: 'done1' },\n        { b: 'done2' }\n     );\n     // \"done1 done2\"\n"
            ],
            "class": "tb.Util"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4085,
            "itemtype": "method",
            "name": "then",
            "chainable": 1,
            "params": [
                {
                    "name": "pFunction",
                    "description": "- function to execute when promise is resolved",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- a new Promise instance (chaining)",
                "type": "Object"
            },
            "example": [
                "\n\n       new tb.Promise(function(resolve, reject){\n           setTimeout( resolve('ok.') );\n       }).then(function(pValue){\n           console.log( pValue );  // >ok.\n       });\n"
            ],
            "class": "tb.Promise"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4105,
            "itemtype": "method",
            "name": "catch",
            "chainable": 1,
            "params": [
                {
                    "name": "pFunction",
                    "description": "- function to execute when promise is rejected",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- a new Promise instance (chaining)",
                "type": "Object"
            },
            "example": [
                "\n\n       new tb.Promise(function(resolve, reject){\n           setTimeout( reject('oops.') );\n       }).catch(function(pValue){\n           console.log( pValue );  // >oops.\n       });\n"
            ],
            "class": "tb.Promise"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4125,
            "itemtype": "method",
            "name": "finally",
            "chainable": 1,
            "params": [
                {
                    "name": "pFunction",
                    "description": "- function to execute at the end in any case",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "- a new Promise instance (chaining)",
                "type": "Object"
            },
            "example": [
                "\n\n       new tb.Promise(function(resolve, reject){\n           setTimeout( reject('whatever.') ); // could also be resolve, finally will always be executed\n       }).finally(function(pValue){\n           console.log( pValue );  // >whatever.\n       });\n"
            ],
            "class": "tb.Promise"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4150,
            "itemtype": "method",
            "name": "tb.Promise.resolve",
            "chainable": 1,
            "static": 1,
            "params": [
                {
                    "name": "pValue",
                    "description": "- the value the returned promise will resolve with",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "- a new resolved Promise instance (chaining)",
                "type": "Object"
            },
            "example": [
                "\n\n       var p = tb.Promise.resolve('resolved');\n"
            ],
            "class": "tb.Promise"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4174,
            "itemtype": "method",
            "name": "tb.Promise.reject",
            "chainable": 1,
            "static": 1,
            "params": [
                {
                    "name": "pValue",
                    "description": "- the value the returned promise will reject with",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "- a new rejected Promise instance (chaining)",
                "type": "Object"
            },
            "example": [
                "\n\n       var p = tb.Promise.reject('rejected');\n"
            ],
            "class": "tb.Promise"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4198,
            "itemtype": "method",
            "name": "tb.Promise.all",
            "chainable": 1,
            "static": 1,
            "params": [
                {
                    "name": "pIterable",
                    "description": "- an array containing values and/or promises",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "- a new rejected Promise instance (chaining)",
                "type": "Object"
            },
            "example": [
                "\n\n       // \"then\" function will be executed when ALL promises have been resolved\n       // \"catch\" function will be executed if one of the promises rejects\n       // values in the parameter array will be converted to Promise.resolve(value)\n\n        var p = tb.Promise.all([\n            true,\n            tb.Promise.resolve('new value')\n        ]).finally(function(pValue){\n           console.log(pValue); // >[ true, 'new value' ]\n        });\n\n        var p = tb.Promise.all([\n            true,\n            tb.Promise.reject('oops.')\n        ]).finally(function(pValue){\n           console.log(pValue); // >oops.\n        });"
            ],
            "class": "tb.Promise"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4269,
            "itemtype": "method",
            "name": "tb.Promise.race",
            "chainable": 1,
            "static": 1,
            "params": [
                {
                    "name": "an",
                    "description": "array containing values and/or promises",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a new rejected Promise instance (chaining)",
                "type": "Object"
            },
            "example": [
                "\n\n       // \"then\" function will be executed when the fastest promise resolves\n       // \"catch\" function will be executed when the fastest promise rejects\n       // values in the parameter array will be converted to Promise.resolve(value)\n\n       var p1 = new tb.Promise(function(resolve,reject){\n           setTimeout(function(){\n               resolve('ok.');\n           },1000);\n       });\n\n       var p2 = new tb.Promise(function(resolve,reject){\n           setTimeout(function(){\n               reject('oops.');\n           },2000);\n       });\n\n       var p = tb.Promise.race([\n           p1,\n           p2\n       ]).then(function(pValue){\n           console.log(pValue); // >ok.\n       }).catch(function(pValue){\n           console.log(pValue); // (will never be reached, p1 resolves first)\n       });"
            ],
            "class": "tb.Promise"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4513,
            "description": "execute promise function",
            "class": "tb.Promise"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4598,
            "memberof": "tb",
            "static": 1,
            "itemtype": "method",
            "name": "tb.require",
            "params": [
                {
                    "name": "pFiles",
                    "description": "array of filenames",
                    "type": "(string|string[])"
                },
                {
                    "name": "pCallback",
                    "description": "optional callback after all loading is done",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "- Promise/A+ compliant promise object",
                "type": "Object"
            },
            "example": [
                "\n\n       // in your code ...\n       tb.require([\n           '/app/styles.css',                  // .css will be inserted into head <link>\n           '/app/someJavascript.js',           // .js will be inserted into head <script>\n           '/app/someData.json',               // .json data will be parsed to JS object\n           '/app/templates/someTemplate.html'  // all other file contents will be saved into repo\n       ], function( pValue ){\n           // do something when all loading activity has finished\n           console.log(pValue); // >[ 'done', 'done', <someObject>, '<someHtmlString>' ]\n       });\n"
            ],
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4849,
            "memberof": "tb",
            "static": 1,
            "itemtype": "method",
            "name": "tb.request",
            "params": [
                {
                    "name": "pOptions",
                    "description": "a hash object containing these options:<br><br><br>",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url:",
                            "description": "(string, required) the URL to call"
                        },
                        {
                            "name": "params",
                            "description": "- a hash object containing the parameters to post",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "- (string, optional, defaults to 'POST') the XHR method",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "- a hash object containing additional XHR headers",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "success",
                            "description": "- the function to call with the request result",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "- the function to call if request status not in 200...299",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "statechange",
                            "description": "- the function to call when readyState changes",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "- structure sample: { cb: myFunction, ms:10000 }\n   cb: callback to run when timeout occurs\n   ms: number of milliseconds the request will run before being terminated",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "cachable",
                            "description": "- defaults to true, indicates whether or not to include a unique id in URL",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "async",
                            "description": "- whether or not to make an asynchronous request",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "- a Promise/A+ compliant promise object",
                "type": "Object"
            },
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4874,
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4922,
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4939,
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4961,
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 4991,
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 5028,
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 5056,
            "name": "",
            "itemtype": "method",
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 5215,
            "itemtype": "method",
            "name": "tb.stop",
            "params": [
                {
                    "name": "pStopit",
                    "description": "- indicating whether to stop event handling",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "- true if event handling stopped, else false\n\nstops event handling",
                "type": "Boolean"
            },
            "class": "tb.Require"
        },
        {
            "file": "src/tb/tb.js",
            "line": 5384,
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "pParameters",
                    "description": "- any combination of parameters\n\n.create() method",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "tb.CRUD"
        },
        {
            "file": "src/tb/tb.js",
            "line": 5416,
            "itemtype": "method",
            "name": "read",
            "params": [
                {
                    "name": "pParameters",
                    "description": "- any combination of parameters\n\n.read() method",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "tb.CRUD"
        },
        {
            "file": "src/tb/tb.js",
            "line": 5449,
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "pParameters",
                    "description": "- any combination of parameters\n\n.update() method",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "tb.CRUD"
        },
        {
            "file": "src/tb/tb.js",
            "line": 5481,
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "pParameters",
                    "description": "- any combination of parameters\n\n.delete() method",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "tb.CRUD"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: copyright",
            "line": " src/tb/tb.js:3"
        },
        {
            "message": "unknown tag: license",
            "line": " src/tb/tb.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/tb/tb.js:48"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/tb/tb.js:215"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:455"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:3444"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:3595"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:3701"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:3756"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:3776"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:3840"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:3856"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:3907"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:4019"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:4539"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:4598"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/tb/tb.js:4849"
        },
        {
            "message": "unknown tag: name",
            "line": " src/tb/tb.js:5056"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tb/tb.js:5056"
        },
        {
            "message": "Missing item type\ntwoBirds V7 core functionality",
            "line": " src/tb/tb.js:3"
        },
        {
            "message": "Missing item type\ndocument.ready bootstrap",
            "line": " src/tb/tb.js:1663"
        },
        {
            "message": "Missing item type\nexecute promise function",
            "line": " src/tb/tb.js:4513"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:4874"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:4922"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:4939"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:4961"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:4991"
        },
        {
            "message": "Missing item type",
            "line": " src/tb/tb.js:5028"
        }
    ]
}